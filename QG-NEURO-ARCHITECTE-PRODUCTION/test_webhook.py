#!/usr/bin/env python3
"""
Script de test pour le webhook QG Neuro-Architecte‚Ñ¢
Simule l'envoi de donn√©es depuis l'application SUPRA-CODE
"""

import requests
import json

# Configuration
API_BASE = "http://localhost:5000"
API_KEY = "test-api-key-qg-neuro-architecte-2025"

def test_webhook():
    """Teste l'endpoint webhook avec des donn√©es d'exemple"""
    
    # Donn√©es d'exemple pour un nouvel op√©rateur
    payload = {
        "apiKey": API_KEY,
        "operateurData": {
            "nomComplet": "Sophie Laurent",
            "email": "sophie.laurent@example.com",
            "telephone": "+33123456789"
        },
        "scanSupraData": {
            "neurotype": "Serotonine-Equilibr√©",
            "scores": {
                "blocA": 15,
                "blocB": 18,
                "blocC": 12,
                "blocD": 16,
                "blocE": 14
            },
            "pourcentages": {
                "blocA": 55.56,
                "blocB": 60.00,
                "blocC": 80.00,
                "blocD": 53.33,
                "blocE": 93.33
            },
            "sousScores": {
                "dopamine": 45.00,
                "serotonine": 85.00,
                "acetylcholine": 65.00,
                "noradrenaline": 55.00,
                "gaba": 70.00,
                "glutamate": 40.00
            },
            "urlRapport": "https://supra-code.io/rapport/test-sophie-laurent-2025"
        },
        "bilansAdditionnels": {
            "nutrition": "Alimentation √©quilibr√©e, consommation mod√©r√©e de caf√©ine.",
            "sommeil": "Sommeil r√©gulier, 7-8h par nuit, qualit√© per√ßue : 8/10."
        }
    }
    
    try:
        print("üöÄ Test du webhook QG Neuro-Architecte‚Ñ¢")
        print(f"üì° Envoi vers: {API_BASE}/api/v1/ingest")
        print(f"üîë Cl√© API: {API_KEY}")
        print()
        
        response = requests.post(
            f"{API_BASE}/api/v1/ingest",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üìä Statut HTTP: {response.status_code}")
        print(f"üìã R√©ponse: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ Webhook test√© avec succ√®s!")
                print(f"üë§ Op√©rateur ID: {data.get('operator_id')}")
                print(f"‚ö†Ô∏è Statut d'urgence: {data.get('statut_urgence')}")
            else:
                print("‚ùå Erreur dans la r√©ponse:", data.get('error'))
        else:
            print("‚ùå Erreur HTTP:", response.status_code)
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")

def test_critical_case():
    """Teste un cas critique avec des scores tr√®s bas"""
    
    payload = {
        "apiKey": API_KEY,
        "operateurData": {
            "nomComplet": "Alexandre Critique",
            "email": "alex.critique@example.com",
            "telephone": "+33987654321"
        },
        "scanSupraData": {
            "neurotype": "Dopamine-Hyperactif",
            "scores": {
                "blocA": 8,
                "blocB": 2,
                "blocC": 5,
                "blocD": 1,
                "blocE": 6
            },
            "pourcentages": {
                "blocA": 29.63,
                "blocB": 16.67,
                "blocC": 33.33,
                "blocD": 6.67,
                "blocE": 40.00
            },
            "sousScores": {
                "dopamine": 95.00,
                "serotonine": 15.00,
                "acetylcholine": 25.00,
                "noradrenaline": 85.00,
                "gaba": 10.00,
                "glutamate": 90.00
            },
            "urlRapport": "https://supra-code.io/rapport/test-alexandre-critique-2025"
        },
        "bilansAdditionnels": {
            "nutrition": "Alimentation irr√©guli√®re, forte consommation de stimulants.",
            "sommeil": "Insomnie fr√©quente, 4-5h par nuit, qualit√© per√ßue : 3/10."
        }
    }
    
    try:
        print("\nüö® Test d'un cas critique")
        
        response = requests.post(
            f"{API_BASE}/api/v1/ingest",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Cas critique trait√©: {data.get('statut_urgence')}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    print("=" * 60)
    print("üß† QG NEURO-ARCHITECTE‚Ñ¢ - TEST WEBHOOK")
    print("=" * 60)
    
    # Test normal
    test_webhook()
    
    # Test cas critique
    test_critical_case()
    
    print("\n" + "=" * 60)
    print("‚úÖ Tests termin√©s!")
    print("üì± V√©rifiez l'interface web pour voir les nouveaux op√©rateurs")
    print("=" * 60)

